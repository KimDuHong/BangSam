[할것]
- views delete까지 기본 만들기
- wishlist

[시간남으면 할것]
- 모델 db다시 작성
- 피그마로 똑같이

[컬러]
https://colorswall.com/palette/197735 

[Q]
올리기나 수정 삭제를 방을 올린사람만 지울수 있어야하므로 프론트에 지금 유저가 방의 주인인지 알려주는 컬럼 만들기(serializers is_owner로)


        if request.user == house.owner:
            house.owner = True
        else:
            house.owner = False

               --------------------

    current_user = request.user.id
    if current_user == user_id:
        return Response({'message': 'Current user matches provided user ID.'}, status=200)
    else:
        return Response({'message': 'Current user does not match provided user ID.'}, status=400)

        --------------------------------

[houselist.view]

        if viewed_houses.count() > MAX_RECENTLY_HOUSES:
            oldest_houses = viewed_houses.order_by("created_at")
            oldest_houses_to_remove = oldest_houses[MAX_RECENTLY_HOUSES:]
            self.recently_views.remove(*oldest_houses_to_remove)

        super(HouseList, self).save(*args, **kwargs)

        if viewed_houses.count() >= MAX_RECENTLY_HOUSES:
            oldest_houses = viewed_houses[:MAX_RECENTLY_HOUSES]
            self.recently_views.remove(*oldest_houses)

        super(HouseList, self).save(*args, **kwargs)

def save(self, *args, **kwargs):
    MAX_RECENTLY_HOUSES = 10

    viewed_houses = self.recently_views.order_by("created_at")

    if viewed_houses.count() > MAX_RECENTLY_HOUSES:
        oldest_houses = viewed_houses[:MAX_RECENTLY_HOUSES]
        houses_to_remove = viewed_houses[MAX_RECENTLY_HOUSES:]
        self.recently_views.remove(*houses_to_remove)

    super(HouseList, self).save(*args, **kwargs)

    -----------------------------

    [미련]

houselist.models
    def save(self, *args, **kwargs):
        MAX_RECENTLY_HOUSES = 10
        viewed_houses = self.recently_views.all()

        if viewed_houses.count() > MAX_RECENTLY_HOUSES:
            print(viewed_houses)
            oldest_remove = viewed_houses.last()
            self.recently_views.remove(oldest_remove)
            print(viewed_houses)

        super(HouseList, self).save(*args, **kwargs)

house.models
        # 조회 목록
        if request.user.is_authenticated:
            try:
                # houselist = HouseList.objects.all()
                houselist = HouseList.objects.get(user=request.user)
                houselist.recently_views.add(house)
            except HouseList.DoesNotExist:
                houselist = HouseList.objects.create(user=request.user)
                house = House.objects.create()
                house_list.houses.add(house)

            houselist.save()

        return Response(serializer.data)
